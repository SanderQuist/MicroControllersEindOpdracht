
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00000ae0  00000b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ae0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  0080021e  0080021e  00000c92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001273  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a34  00000000  00000000  0000200f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007fd  00000000  00000000  00002a43  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000190  00000000  00000000  00003240  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064a  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000602  00000000  00000000  00003a1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a0 c0       	rjmp	.+320    	; 0x142 <__ctors_end>
   2:	00 00       	nop
   4:	bb c0       	rjmp	.+374    	; 0x17c <__bad_interrupt>
   6:	00 00       	nop
   8:	b9 c0       	rjmp	.+370    	; 0x17c <__bad_interrupt>
   a:	00 00       	nop
   c:	b7 c0       	rjmp	.+366    	; 0x17c <__bad_interrupt>
   e:	00 00       	nop
  10:	b5 c0       	rjmp	.+362    	; 0x17c <__bad_interrupt>
  12:	00 00       	nop
  14:	b3 c0       	rjmp	.+358    	; 0x17c <__bad_interrupt>
  16:	00 00       	nop
  18:	b1 c0       	rjmp	.+354    	; 0x17c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	af c0       	rjmp	.+350    	; 0x17c <__bad_interrupt>
  1e:	00 00       	nop
  20:	ad c0       	rjmp	.+346    	; 0x17c <__bad_interrupt>
  22:	00 00       	nop
  24:	ab c0       	rjmp	.+342    	; 0x17c <__bad_interrupt>
  26:	00 00       	nop
  28:	a9 c0       	rjmp	.+338    	; 0x17c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	a7 c0       	rjmp	.+334    	; 0x17c <__bad_interrupt>
  2e:	00 00       	nop
  30:	a5 c0       	rjmp	.+330    	; 0x17c <__bad_interrupt>
  32:	00 00       	nop
  34:	a3 c0       	rjmp	.+326    	; 0x17c <__bad_interrupt>
  36:	00 00       	nop
  38:	a1 c0       	rjmp	.+322    	; 0x17c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	9f c0       	rjmp	.+318    	; 0x17c <__bad_interrupt>
  3e:	00 00       	nop
  40:	9d c0       	rjmp	.+314    	; 0x17c <__bad_interrupt>
  42:	00 00       	nop
  44:	9b c0       	rjmp	.+310    	; 0x17c <__bad_interrupt>
  46:	00 00       	nop
  48:	99 c0       	rjmp	.+306    	; 0x17c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c0       	rjmp	.+302    	; 0x17c <__bad_interrupt>
  4e:	00 00       	nop
  50:	95 c0       	rjmp	.+298    	; 0x17c <__bad_interrupt>
  52:	00 00       	nop
  54:	93 c0       	rjmp	.+294    	; 0x17c <__bad_interrupt>
  56:	00 00       	nop
  58:	91 c0       	rjmp	.+290    	; 0x17c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	8f c0       	rjmp	.+286    	; 0x17c <__bad_interrupt>
  5e:	00 00       	nop
  60:	8d c0       	rjmp	.+282    	; 0x17c <__bad_interrupt>
  62:	00 00       	nop
  64:	8b c0       	rjmp	.+278    	; 0x17c <__bad_interrupt>
  66:	00 00       	nop
  68:	89 c0       	rjmp	.+274    	; 0x17c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	87 c0       	rjmp	.+270    	; 0x17c <__bad_interrupt>
  6e:	00 00       	nop
  70:	85 c0       	rjmp	.+266    	; 0x17c <__bad_interrupt>
  72:	00 00       	nop
  74:	83 c0       	rjmp	.+262    	; 0x17c <__bad_interrupt>
  76:	00 00       	nop
  78:	81 c0       	rjmp	.+258    	; 0x17c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	7f c0       	rjmp	.+254    	; 0x17c <__bad_interrupt>
  7e:	00 00       	nop
  80:	7d c0       	rjmp	.+250    	; 0x17c <__bad_interrupt>
  82:	00 00       	nop
  84:	7b c0       	rjmp	.+246    	; 0x17c <__bad_interrupt>
  86:	00 00       	nop
  88:	79 c0       	rjmp	.+242    	; 0x17c <__bad_interrupt>
  8a:	00 00       	nop
  8c:	fa 03       	fmulsu	r23, r18
  8e:	0d 04       	cpc	r0, r13
  90:	0d 04       	cpc	r0, r13
  92:	0d 04       	cpc	r0, r13
  94:	0d 04       	cpc	r0, r13
  96:	0d 04       	cpc	r0, r13
  98:	0d 04       	cpc	r0, r13
  9a:	0d 04       	cpc	r0, r13
  9c:	0d 04       	cpc	r0, r13
  9e:	0d 04       	cpc	r0, r13
  a0:	0d 04       	cpc	r0, r13
  a2:	0d 04       	cpc	r0, r13
  a4:	0d 04       	cpc	r0, r13
  a6:	0d 04       	cpc	r0, r13
  a8:	0d 04       	cpc	r0, r13
  aa:	0d 04       	cpc	r0, r13
  ac:	0d 04       	cpc	r0, r13
  ae:	0d 04       	cpc	r0, r13
  b0:	0d 04       	cpc	r0, r13
  b2:	0d 04       	cpc	r0, r13
  b4:	0d 04       	cpc	r0, r13
  b6:	0d 04       	cpc	r0, r13
  b8:	0d 04       	cpc	r0, r13
  ba:	0d 04       	cpc	r0, r13
  bc:	0d 04       	cpc	r0, r13
  be:	0d 04       	cpc	r0, r13
  c0:	0d 04       	cpc	r0, r13
  c2:	0d 04       	cpc	r0, r13
  c4:	0d 04       	cpc	r0, r13
  c6:	0d 04       	cpc	r0, r13
  c8:	0d 04       	cpc	r0, r13
  ca:	0d 04       	cpc	r0, r13
  cc:	0d 04       	cpc	r0, r13
  ce:	0d 04       	cpc	r0, r13
  d0:	0d 04       	cpc	r0, r13
  d2:	0d 04       	cpc	r0, r13
  d4:	0d 04       	cpc	r0, r13
  d6:	0d 04       	cpc	r0, r13
  d8:	0d 04       	cpc	r0, r13
  da:	0d 04       	cpc	r0, r13
  dc:	0d 04       	cpc	r0, r13
  de:	0d 04       	cpc	r0, r13
  e0:	0d 04       	cpc	r0, r13
  e2:	0d 04       	cpc	r0, r13
  e4:	0d 04       	cpc	r0, r13
  e6:	0d 04       	cpc	r0, r13
  e8:	0d 04       	cpc	r0, r13
  ea:	0d 04       	cpc	r0, r13
  ec:	0d 04       	cpc	r0, r13
  ee:	0d 04       	cpc	r0, r13
  f0:	0d 04       	cpc	r0, r13
  f2:	0d 04       	cpc	r0, r13
  f4:	0d 04       	cpc	r0, r13
  f6:	0d 04       	cpc	r0, r13
  f8:	0d 04       	cpc	r0, r13
  fa:	0d 04       	cpc	r0, r13
  fc:	0d 04       	cpc	r0, r13
  fe:	0d 04       	cpc	r0, r13
 100:	0d 04       	cpc	r0, r13
 102:	0d 04       	cpc	r0, r13
 104:	0d 04       	cpc	r0, r13
 106:	0d 04       	cpc	r0, r13
 108:	0d 04       	cpc	r0, r13
 10a:	0d 04       	cpc	r0, r13
 10c:	0d 04       	cpc	r0, r13
 10e:	be 01       	movw	r22, r28
 110:	d4 01       	movw	r26, r8
 112:	ea 01       	movw	r28, r20
 114:	00 02       	muls	r16, r16
 116:	16 02       	muls	r17, r22
 118:	2c 02       	muls	r18, r28
 11a:	42 02       	muls	r20, r18
 11c:	58 02       	muls	r21, r24
 11e:	6e 02       	muls	r22, r30
 120:	84 02       	muls	r24, r20
 122:	9a 02       	muls	r25, r26
 124:	b0 02       	muls	r27, r16
 126:	c6 02       	muls	r28, r22
 128:	dc 02       	muls	r29, r28
 12a:	f2 02       	muls	r31, r18
 12c:	08 03       	fmul	r16, r16
 12e:	1e 03       	fmul	r17, r22
 130:	34 03       	mulsu	r19, r20
 132:	4a 03       	fmul	r20, r18
 134:	60 03       	mulsu	r22, r16
 136:	76 03       	mulsu	r23, r22
 138:	8c 03       	fmulsu	r16, r20
 13a:	a2 03       	fmuls	r18, r18
 13c:	b8 03       	fmulsu	r19, r16
 13e:	ce 03       	fmulsu	r20, r22
 140:	e4 03       	fmuls	r22, r20

00000142 <__ctors_end>:
 142:	11 24       	eor	r1, r1
 144:	1f be       	out	0x3f, r1	; 63
 146:	cf ef       	ldi	r28, 0xFF	; 255
 148:	d0 e1       	ldi	r29, 0x10	; 16
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	cd bf       	out	0x3d, r28	; 61

0000014e <__do_copy_data>:
 14e:	12 e0       	ldi	r17, 0x02	; 2
 150:	a0 e0       	ldi	r26, 0x00	; 0
 152:	b1 e0       	ldi	r27, 0x01	; 1
 154:	e0 ee       	ldi	r30, 0xE0	; 224
 156:	fa e0       	ldi	r31, 0x0A	; 10
 158:	00 e0       	ldi	r16, 0x00	; 0
 15a:	0b bf       	out	0x3b, r16	; 59
 15c:	02 c0       	rjmp	.+4      	; 0x162 <__do_copy_data+0x14>
 15e:	07 90       	elpm	r0, Z+
 160:	0d 92       	st	X+, r0
 162:	ae 31       	cpi	r26, 0x1E	; 30
 164:	b1 07       	cpc	r27, r17
 166:	d9 f7       	brne	.-10     	; 0x15e <__do_copy_data+0x10>

00000168 <__do_clear_bss>:
 168:	22 e0       	ldi	r18, 0x02	; 2
 16a:	ae e1       	ldi	r26, 0x1E	; 30
 16c:	b2 e0       	ldi	r27, 0x02	; 2
 16e:	01 c0       	rjmp	.+2      	; 0x172 <.do_clear_bss_start>

00000170 <.do_clear_bss_loop>:
 170:	1d 92       	st	X+, r1

00000172 <.do_clear_bss_start>:
 172:	a8 33       	cpi	r26, 0x38	; 56
 174:	b2 07       	cpc	r27, r18
 176:	e1 f7       	brne	.-8      	; 0x170 <.do_clear_bss_loop>
 178:	74 d3       	rcall	.+1768   	; 0x862 <main>
 17a:	b0 c4       	rjmp	.+2400   	; 0xadc <_exit>

0000017c <__bad_interrupt>:
 17c:	41 cf       	rjmp	.-382    	; 0x0 <__vectors>

0000017e <twi_start>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 17e:	84 ea       	ldi	r24, 0xA4	; 164
 180:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 184:	e4 e7       	ldi	r30, 0x74	; 116
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	ec f7       	brge	.-6      	; 0x188 <twi_start+0xa>
 18e:	08 95       	ret

00000190 <twi_tx>:
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWDR = data;
 190:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 194:	84 e8       	ldi	r24, 0x84	; 132
 196:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 19a:	e4 e7       	ldi	r30, 0x74	; 116
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	ec f7       	brge	.-6      	; 0x19e <twi_tx+0xe>
}
 1a4:	08 95       	ret

000001a6 <twi_init>:
inputs:
outputs:
notes:			TWI clock is set to 100 kHz
Version :    	DMK, Initial code
*******************************************************************/
{
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
	TWSR = 0;
 1ac:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 1b0:	80 e2       	ldi	r24, 0x20	; 32
 1b2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	// Init HT16K22. Page 32 datasheet
	twi_start();
 1b6:	e3 df       	rcall	.-58     	; 0x17e <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 1b8:	80 ee       	ldi	r24, 0xE0	; 224
 1ba:	ea df       	rcall	.-44     	; 0x190 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 1bc:	81 e2       	ldi	r24, 0x21	; 33
 1be:	e8 df       	rcall	.-48     	; 0x190 <twi_tx>
 1c0:	c4 e7       	ldi	r28, 0x74	; 116
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1c2:	d0 e0       	ldi	r29, 0x00	; 0
 1c4:	14 e9       	ldi	r17, 0x94	; 148
 1c6:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
	twi_stop();
	
	twi_start();
 1c8:	da df       	rcall	.-76     	; 0x17e <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 1ca:	80 ee       	ldi	r24, 0xE0	; 224
 1cc:	e1 df       	rcall	.-62     	; 0x190 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 1ce:	80 ea       	ldi	r24, 0xA0	; 160
 1d0:	df df       	rcall	.-66     	; 0x190 <twi_tx>
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1d2:	18 83       	st	Y, r17
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xA0);	// HT16K33 pins all output
	twi_stop();
	
	twi_start();
 1d4:	d4 df       	rcall	.-88     	; 0x17e <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 1d6:	80 ee       	ldi	r24, 0xE0	; 224
 1d8:	db df       	rcall	.-74     	; 0x190 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 1da:	83 ee       	ldi	r24, 0xE3	; 227
 1dc:	d9 df       	rcall	.-78     	; 0x190 <twi_tx>
 1de:	18 83       	st	Y, r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1e0:	ce df       	rcall	.-100    	; 0x17e <twi_start>
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
	twi_stop();
	
	twi_start();
 1e2:	80 ee       	ldi	r24, 0xE0	; 224
 1e4:	d5 df       	rcall	.-86     	; 0x190 <twi_tx>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 1e6:	81 e8       	ldi	r24, 0x81	; 129
 1e8:	d3 df       	rcall	.-90     	; 0x190 <twi_tx>
 1ea:	18 83       	st	Y, r17
	twi_tx(0x81);	// Display OFF - Blink On
 1ec:	df 91       	pop	r29
 1ee:	cf 91       	pop	r28
 1f0:	1f 91       	pop	r17
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 1f2:	08 95       	ret

000001f4 <write_data>:
	twi_start();
	twi_tx(0xE0);	// Display I2C address + R/W bit
	twi_tx(0x81);	// Display OFF - Blink On
	twi_stop();
	
}
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	d8 2f       	mov	r29, r24
 1fa:	c6 2f       	mov	r28, r22
	while( 0 == (TWCR & 0x80) );
}

void write_data(unsigned char adress,unsigned char data)
{
	twi_start();
 1fc:	c0 df       	rcall	.-128    	; 0x17e <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 1fe:	80 ee       	ldi	r24, 0xE0	; 224
 200:	c7 df       	rcall	.-114    	; 0x190 <twi_tx>
	twi_tx(adress);	// Address
 202:	8d 2f       	mov	r24, r29
 204:	c5 df       	rcall	.-118    	; 0x190 <twi_tx>
	twi_tx(data);	// data
 206:	8c 2f       	mov	r24, r28
 208:	c3 df       	rcall	.-122    	; 0x190 <twi_tx>
 20a:	84 e9       	ldi	r24, 0x94	; 148
outputs:
notes:
Version :    	DMK, Initial code
*******************************************************************/
{
	TWCR = (0x80 | 0x10 | 0x04);
 20c:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 210:	df 91       	pop	r29
	twi_start();
	twi_tx(0xE0);	// Display I2C addres + R/W bit
	twi_tx(adress);	// Address
	twi_tx(data);	// data
	twi_stop();
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <clear_display>:
 216:	0f 93       	push	r16
		write_data(letterrows[i], Z[i]);
	}
}

//Method to clear the complete display.
void clear_display(){
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	c5 e1       	ldi	r28, 0x15	; 21
 220:	d2 e0       	ldi	r29, 0x02	; 2
 222:	0d e1       	ldi	r16, 0x1D	; 29
 224:	12 e0       	ldi	r17, 0x02	; 2
	for(int i=0; i < 8; i++){
		write_data(allrows[i], 0);
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	89 91       	ld	r24, Y+
 22a:	e4 df       	rcall	.-56     	; 0x1f4 <write_data>
	}
}

//Method to clear the complete display.
void clear_display(){
	for(int i=0; i < 8; i++){
 22c:	c0 17       	cp	r28, r16
 22e:	d1 07       	cpc	r29, r17
 230:	d1 f7       	brne	.-12     	; 0x226 <clear_display+0x10>
		write_data(allrows[i], 0);
	}
}
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <write_board_data>:

void write_board_data(int* text)
{
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	8c 01       	movw	r16, r24
 24a:	c5 e1       	ldi	r28, 0x15	; 21
 24c:	d2 e0       	ldi	r29, 0x02	; 2
	char columnValue = 0;
	int value = 8;
 24e:	68 94       	set
 250:	ee 24       	eor	r14, r14
 252:	e3 f8       	bld	r14, 3
 254:	f1 2c       	mov	r15, r1
	for(int row = 0; row < 8; row++)
	{
		columnValue = text[value + offset];
 256:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <offset>
 25a:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <offset+0x1>
 25e:	ee 0d       	add	r30, r14
 260:	ff 1d       	adc	r31, r15
 262:	ee 0f       	add	r30, r30
 264:	ff 1f       	adc	r31, r31
 266:	e0 0f       	add	r30, r16
 268:	f1 1f       	adc	r31, r17
		write_data(allrows[row],columnValue);
 26a:	60 81       	ld	r22, Z
 26c:	89 91       	ld	r24, Y+
 26e:	c2 df       	rcall	.-124    	; 0x1f4 <write_data>
		value--;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	e8 1a       	sub	r14, r24
 274:	f1 08       	sbc	r15, r1

void write_board_data(int* text)
{
	char columnValue = 0;
	int value = 8;
	for(int row = 0; row < 8; row++)
 276:	79 f7       	brne	.-34     	; 0x256 <write_board_data+0x1a>
	{
		columnValue = text[value + offset];
		write_data(allrows[row],columnValue);
		value--;
	}
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	08 95       	ret

00000286 <set_offset>:

 void set_offset(void){
 	offset++;
 286:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <offset>
 28a:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <offset+0x1>
 28e:	01 96       	adiw	r24, 0x01	; 1
 290:	90 93 21 02 	sts	0x0221, r25	; 0x800221 <offset+0x1>
 294:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <offset>
 	if(offset > counter){
 298:	20 91 1e 02 	lds	r18, 0x021E	; 0x80021e <__data_end>
 29c:	30 91 1f 02 	lds	r19, 0x021F	; 0x80021f <__data_end+0x1>
 2a0:	28 17       	cp	r18, r24
 2a2:	39 07       	cpc	r19, r25
 2a4:	24 f4       	brge	.+8      	; 0x2ae <set_offset+0x28>
 		offset = 0;
 2a6:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <offset+0x1>
 2aa:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <offset>
 2ae:	08 95       	ret

000002b0 <init_matrix_screen>:
 	}
 }


void init_matrix_screen(void){
	twi_init();
 2b0:	7a df       	rcall	.-268    	; 0x1a6 <twi_init>
	
	DDRA = 0b11111111;
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	8a bb       	out	0x1a, r24	; 26

	EICRB |= 0b11000000; //set INT7 faling edge
 2b6:	8a b7       	in	r24, 0x3a	; 58
 2b8:	80 6c       	ori	r24, 0xC0	; 192
 2ba:	8a bf       	out	0x3a, r24	; 58
	EIMSK |= 0b10000000; //enable INT&
 2bc:	89 b7       	in	r24, 0x39	; 57
 2be:	80 68       	ori	r24, 0x80	; 128
 2c0:	89 bf       	out	0x39, r24	; 57
 2c2:	08 95       	ret

000002c4 <wait>:
}

void wait( int ms )
{
	for (int i=0; i<ms; i++)
 2c4:	18 16       	cp	r1, r24
 2c6:	19 06       	cpc	r1, r25
 2c8:	6c f4       	brge	.+26     	; 0x2e4 <wait+0x20>
 2ca:	20 e0       	ldi	r18, 0x00	; 0
 2cc:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	e9 ef       	ldi	r30, 0xF9	; 249
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	31 97       	sbiw	r30, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <wait+0xe>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <wait+0x14>
 2d8:	00 00       	nop
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	3f 4f       	sbci	r19, 0xFF	; 255
 2de:	82 17       	cp	r24, r18
 2e0:	93 07       	cpc	r25, r19
 2e2:	a9 f7       	brne	.-22     	; 0x2ce <wait+0xa>
 2e4:	08 95       	ret

000002e6 <init_letters>:
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

void init_letters(void){
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
	int* text = malloc((38 * 8) * sizeof(int));
 2f6:	80 e6       	ldi	r24, 0x60	; 96
 2f8:	92 e0       	ldi	r25, 0x02	; 2
 2fa:	c7 d2       	rcall	.+1422   	; 0x88a <malloc>
 2fc:	8c 01       	movw	r16, r24
 2fe:	ac 01       	movw	r20, r24
 300:	40 5a       	subi	r20, 0xA0	; 160
 302:	5d 4f       	sbci	r21, 0xFD	; 253
	
	for(int i = 0; i < 38; i++){
		memcpy(text + (i * 8), emptySpace, 8 * sizeof(int));
 304:	20 e1       	ldi	r18, 0x10	; 16
 306:	e4 e2       	ldi	r30, 0x24	; 36
 308:	f2 e0       	ldi	r31, 0x02	; 2
 30a:	dc 01       	movw	r26, r24
 30c:	01 90       	ld	r0, Z+
 30e:	0d 92       	st	X+, r0
 310:	2a 95       	dec	r18
 312:	e1 f7       	brne	.-8      	; 0x30c <init_letters+0x26>
 314:	40 96       	adiw	r24, 0x10	; 16
}

void init_letters(void){
	int* text = malloc((38 * 8) * sizeof(int));
	
	for(int i = 0; i < 38; i++){
 316:	84 17       	cp	r24, r20
 318:	95 07       	cpc	r25, r21
 31a:	a1 f7       	brne	.-24     	; 0x304 <init_letters+0x1e>
		memcpy(text + (i * 8), emptySpace, 8 * sizeof(int));
	}
	memcpy(text + 8, emptySpace, 8 * sizeof(int));
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	e4 e2       	ldi	r30, 0x24	; 36
 320:	f2 e0       	ldi	r31, 0x02	; 2
 322:	d8 01       	movw	r26, r16
 324:	50 96       	adiw	r26, 0x10	; 16
 326:	01 90       	ld	r0, Z+
 328:	0d 92       	st	X+, r0
 32a:	8a 95       	dec	r24
 32c:	e1 f7       	brne	.-8      	; 0x326 <init_letters+0x40>
	counter = 8;
 32e:	88 e0       	ldi	r24, 0x08	; 8
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 336:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
	
	for(int i = 0; i < size_of_tekst; i++){
 33a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <size_of_tekst>
 33e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <size_of_tekst+0x1>
 342:	18 16       	cp	r1, r24
 344:	19 06       	cpc	r1, r25
 346:	0c f0       	brlt	.+2      	; 0x34a <init_letters+0x64>
 348:	7f c2       	rjmp	.+1278   	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
 34a:	c6 e0       	ldi	r28, 0x06	; 6
 34c:	d1 e0       	ldi	r29, 0x01	; 1
 34e:	9c 01       	movw	r18, r24
 350:	2a 5f       	subi	r18, 0xFA	; 250
 352:	3e 4f       	sbci	r19, 0xFE	; 254
 354:	79 01       	movw	r14, r18
			memcpy(text + counter, Z, 6 * sizeof(int));
			counter += 6;
			break;
			case ' ':
			memcpy(text + counter, space, sizeof(int));
			memcpy(text + counter, space, sizeof(int));
 356:	0f 2e       	mov	r0, r31
 358:	f2 e2       	ldi	r31, 0x22	; 34
 35a:	cf 2e       	mov	r12, r31
 35c:	f2 e0       	ldi	r31, 0x02	; 2
 35e:	df 2e       	mov	r13, r31
 360:	f0 2d       	mov	r31, r0
	}
	memcpy(text + 8, emptySpace, 8 * sizeof(int));
	counter = 8;
	
	for(int i = 0; i < size_of_tekst; i++){
		char character = tolower(string[i]);
 362:	89 91       	ld	r24, Y+
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	b2 d3       	rcall	.+1892   	; 0xacc <tolower>
		
		switch(character){
 368:	fc 01       	movw	r30, r24
 36a:	ff 27       	eor	r31, r31
 36c:	b0 97       	sbiw	r30, 0x20	; 32
 36e:	eb 35       	cpi	r30, 0x5B	; 91
 370:	f1 05       	cpc	r31, r1
 372:	08 f0       	brcs	.+2      	; 0x376 <init_letters+0x90>
 374:	52 c2       	rjmp	.+1188   	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
 376:	ea 5b       	subi	r30, 0xBA	; 186
 378:	ff 4f       	sbci	r31, 0xFF	; 255
 37a:	7e c2       	rjmp	.+1276   	; 0x878 <__tablejump2__>
			case 'a':
			memcpy(text + counter, A, 5 * sizeof(int));
 37c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 380:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 384:	dc 01       	movw	r26, r24
 386:	aa 0f       	add	r26, r26
 388:	bb 1f       	adc	r27, r27
 38a:	a0 0f       	add	r26, r16
 38c:	b1 1f       	adc	r27, r17
 38e:	2a e0       	ldi	r18, 0x0A	; 10
 390:	eb e0       	ldi	r30, 0x0B	; 11
 392:	f2 e0       	ldi	r31, 0x02	; 2
 394:	01 90       	ld	r0, Z+
 396:	0d 92       	st	X+, r0
 398:	2a 95       	dec	r18
 39a:	e1 f7       	brne	.-8      	; 0x394 <init_letters+0xae>
			counter += 5;
 39c:	05 96       	adiw	r24, 0x05	; 5
 39e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 3a2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 3a6:	39 c2       	rjmp	.+1138   	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'b':
			memcpy(text + counter, B, 5 * sizeof(int));
 3a8:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 3ac:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 3b0:	dc 01       	movw	r26, r24
 3b2:	aa 0f       	add	r26, r26
 3b4:	bb 1f       	adc	r27, r27
 3b6:	a0 0f       	add	r26, r16
 3b8:	b1 1f       	adc	r27, r17
 3ba:	2a e0       	ldi	r18, 0x0A	; 10
 3bc:	e1 e0       	ldi	r30, 0x01	; 1
 3be:	f2 e0       	ldi	r31, 0x02	; 2
 3c0:	01 90       	ld	r0, Z+
 3c2:	0d 92       	st	X+, r0
 3c4:	2a 95       	dec	r18
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <init_letters+0xda>
			counter += 5;
 3c8:	05 96       	adiw	r24, 0x05	; 5
 3ca:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 3ce:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 3d2:	23 c2       	rjmp	.+1094   	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'c':
			memcpy(text + counter, C, 5 * sizeof(int));
 3d4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 3d8:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 3dc:	dc 01       	movw	r26, r24
 3de:	aa 0f       	add	r26, r26
 3e0:	bb 1f       	adc	r27, r27
 3e2:	a0 0f       	add	r26, r16
 3e4:	b1 1f       	adc	r27, r17
 3e6:	2a e0       	ldi	r18, 0x0A	; 10
 3e8:	e7 ef       	ldi	r30, 0xF7	; 247
 3ea:	f1 e0       	ldi	r31, 0x01	; 1
 3ec:	01 90       	ld	r0, Z+
 3ee:	0d 92       	st	X+, r0
 3f0:	2a 95       	dec	r18
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <init_letters+0x106>
			counter += 5;
 3f4:	05 96       	adiw	r24, 0x05	; 5
 3f6:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 3fa:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 3fe:	0d c2       	rjmp	.+1050   	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'd':
			memcpy(text + counter, D, 5 * sizeof(int));
 400:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 404:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 408:	dc 01       	movw	r26, r24
 40a:	aa 0f       	add	r26, r26
 40c:	bb 1f       	adc	r27, r27
 40e:	a0 0f       	add	r26, r16
 410:	b1 1f       	adc	r27, r17
 412:	2a e0       	ldi	r18, 0x0A	; 10
 414:	ed ee       	ldi	r30, 0xED	; 237
 416:	f1 e0       	ldi	r31, 0x01	; 1
 418:	01 90       	ld	r0, Z+
 41a:	0d 92       	st	X+, r0
 41c:	2a 95       	dec	r18
 41e:	e1 f7       	brne	.-8      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
			counter += 5;
 420:	05 96       	adiw	r24, 0x05	; 5
 422:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 426:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 42a:	f7 c1       	rjmp	.+1006   	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'e':
			memcpy(text + counter, E, 5 * sizeof(int));
 42c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 430:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 434:	dc 01       	movw	r26, r24
 436:	aa 0f       	add	r26, r26
 438:	bb 1f       	adc	r27, r27
 43a:	a0 0f       	add	r26, r16
 43c:	b1 1f       	adc	r27, r17
 43e:	2a e0       	ldi	r18, 0x0A	; 10
 440:	e3 ee       	ldi	r30, 0xE3	; 227
 442:	f1 e0       	ldi	r31, 0x01	; 1
 444:	01 90       	ld	r0, Z+
 446:	0d 92       	st	X+, r0
 448:	2a 95       	dec	r18
 44a:	e1 f7       	brne	.-8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			counter += 5;
 44c:	05 96       	adiw	r24, 0x05	; 5
 44e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 452:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 456:	e1 c1       	rjmp	.+962    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'f':
			memcpy(text + counter, F, 5 * sizeof(int));
 458:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 45c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 460:	dc 01       	movw	r26, r24
 462:	aa 0f       	add	r26, r26
 464:	bb 1f       	adc	r27, r27
 466:	a0 0f       	add	r26, r16
 468:	b1 1f       	adc	r27, r17
 46a:	2a e0       	ldi	r18, 0x0A	; 10
 46c:	e9 ed       	ldi	r30, 0xD9	; 217
 46e:	f1 e0       	ldi	r31, 0x01	; 1
 470:	01 90       	ld	r0, Z+
 472:	0d 92       	st	X+, r0
 474:	2a 95       	dec	r18
 476:	e1 f7       	brne	.-8      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
			counter += 5;
 478:	05 96       	adiw	r24, 0x05	; 5
 47a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 47e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 482:	cb c1       	rjmp	.+918    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'g':
			memcpy(text + counter, G, 5 * sizeof(int));
 484:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 488:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 48c:	dc 01       	movw	r26, r24
 48e:	aa 0f       	add	r26, r26
 490:	bb 1f       	adc	r27, r27
 492:	a0 0f       	add	r26, r16
 494:	b1 1f       	adc	r27, r17
 496:	2a e0       	ldi	r18, 0x0A	; 10
 498:	ef ec       	ldi	r30, 0xCF	; 207
 49a:	f1 e0       	ldi	r31, 0x01	; 1
 49c:	01 90       	ld	r0, Z+
 49e:	0d 92       	st	X+, r0
 4a0:	2a 95       	dec	r18
 4a2:	e1 f7       	brne	.-8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
			counter += 5;
 4a4:	05 96       	adiw	r24, 0x05	; 5
 4a6:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 4aa:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 4ae:	b5 c1       	rjmp	.+874    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'h':
			memcpy(text + counter, H, 5 * sizeof(int));
 4b0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 4b4:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 4b8:	dc 01       	movw	r26, r24
 4ba:	aa 0f       	add	r26, r26
 4bc:	bb 1f       	adc	r27, r27
 4be:	a0 0f       	add	r26, r16
 4c0:	b1 1f       	adc	r27, r17
 4c2:	2a e0       	ldi	r18, 0x0A	; 10
 4c4:	e5 ec       	ldi	r30, 0xC5	; 197
 4c6:	f1 e0       	ldi	r31, 0x01	; 1
 4c8:	01 90       	ld	r0, Z+
 4ca:	0d 92       	st	X+, r0
 4cc:	2a 95       	dec	r18
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
			counter += 5;
 4d0:	05 96       	adiw	r24, 0x05	; 5
 4d2:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 4d6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 4da:	9f c1       	rjmp	.+830    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'i':
			memcpy(text + counter, I, 5 * sizeof(int));
 4dc:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 4e0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 4e4:	dc 01       	movw	r26, r24
 4e6:	aa 0f       	add	r26, r26
 4e8:	bb 1f       	adc	r27, r27
 4ea:	a0 0f       	add	r26, r16
 4ec:	b1 1f       	adc	r27, r17
 4ee:	2a e0       	ldi	r18, 0x0A	; 10
 4f0:	eb eb       	ldi	r30, 0xBB	; 187
 4f2:	f1 e0       	ldi	r31, 0x01	; 1
 4f4:	01 90       	ld	r0, Z+
 4f6:	0d 92       	st	X+, r0
 4f8:	2a 95       	dec	r18
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
			counter += 5;
 4fc:	05 96       	adiw	r24, 0x05	; 5
 4fe:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 502:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 506:	89 c1       	rjmp	.+786    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'j':
			memcpy(text + counter, J, 4 * sizeof(int));
 508:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 50c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 510:	dc 01       	movw	r26, r24
 512:	aa 0f       	add	r26, r26
 514:	bb 1f       	adc	r27, r27
 516:	a0 0f       	add	r26, r16
 518:	b1 1f       	adc	r27, r17
 51a:	28 e0       	ldi	r18, 0x08	; 8
 51c:	e3 eb       	ldi	r30, 0xB3	; 179
 51e:	f1 e0       	ldi	r31, 0x01	; 1
 520:	01 90       	ld	r0, Z+
 522:	0d 92       	st	X+, r0
 524:	2a 95       	dec	r18
 526:	e1 f7       	brne	.-8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
			counter += 4;
 528:	04 96       	adiw	r24, 0x04	; 4
 52a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 52e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 532:	73 c1       	rjmp	.+742    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'k':
			memcpy(text + counter, K, 4 * sizeof(int));
 534:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 538:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 53c:	dc 01       	movw	r26, r24
 53e:	aa 0f       	add	r26, r26
 540:	bb 1f       	adc	r27, r27
 542:	a0 0f       	add	r26, r16
 544:	b1 1f       	adc	r27, r17
 546:	28 e0       	ldi	r18, 0x08	; 8
 548:	eb ea       	ldi	r30, 0xAB	; 171
 54a:	f1 e0       	ldi	r31, 0x01	; 1
 54c:	01 90       	ld	r0, Z+
 54e:	0d 92       	st	X+, r0
 550:	2a 95       	dec	r18
 552:	e1 f7       	brne	.-8      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
			counter += 4;
 554:	04 96       	adiw	r24, 0x04	; 4
 556:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 55a:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 55e:	5d c1       	rjmp	.+698    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'l':
			memcpy(text + counter, L, 4 * sizeof(int));
 560:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 564:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 568:	dc 01       	movw	r26, r24
 56a:	aa 0f       	add	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	a0 0f       	add	r26, r16
 570:	b1 1f       	adc	r27, r17
 572:	28 e0       	ldi	r18, 0x08	; 8
 574:	e3 ea       	ldi	r30, 0xA3	; 163
 576:	f1 e0       	ldi	r31, 0x01	; 1
 578:	01 90       	ld	r0, Z+
 57a:	0d 92       	st	X+, r0
 57c:	2a 95       	dec	r18
 57e:	e1 f7       	brne	.-8      	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
			counter += 4;
 580:	04 96       	adiw	r24, 0x04	; 4
 582:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 586:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 58a:	47 c1       	rjmp	.+654    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'm':
			memcpy(text + counter, M, 5 * sizeof(int));
 58c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 590:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 594:	dc 01       	movw	r26, r24
 596:	aa 0f       	add	r26, r26
 598:	bb 1f       	adc	r27, r27
 59a:	a0 0f       	add	r26, r16
 59c:	b1 1f       	adc	r27, r17
 59e:	2a e0       	ldi	r18, 0x0A	; 10
 5a0:	e9 e9       	ldi	r30, 0x99	; 153
 5a2:	f1 e0       	ldi	r31, 0x01	; 1
 5a4:	01 90       	ld	r0, Z+
 5a6:	0d 92       	st	X+, r0
 5a8:	2a 95       	dec	r18
 5aa:	e1 f7       	brne	.-8      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
			counter += 5;
 5ac:	05 96       	adiw	r24, 0x05	; 5
 5ae:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 5b2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 5b6:	31 c1       	rjmp	.+610    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'n':
			memcpy(text + counter, N, 5 * sizeof(int));
 5b8:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 5bc:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 5c0:	dc 01       	movw	r26, r24
 5c2:	aa 0f       	add	r26, r26
 5c4:	bb 1f       	adc	r27, r27
 5c6:	a0 0f       	add	r26, r16
 5c8:	b1 1f       	adc	r27, r17
 5ca:	2a e0       	ldi	r18, 0x0A	; 10
 5cc:	ef e8       	ldi	r30, 0x8F	; 143
 5ce:	f1 e0       	ldi	r31, 0x01	; 1
 5d0:	01 90       	ld	r0, Z+
 5d2:	0d 92       	st	X+, r0
 5d4:	2a 95       	dec	r18
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
			counter += 5;
 5d8:	05 96       	adiw	r24, 0x05	; 5
 5da:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 5de:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 5e2:	1b c1       	rjmp	.+566    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'o':
			memcpy(text + counter, O, 5 * sizeof(int));
 5e4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 5e8:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 5ec:	dc 01       	movw	r26, r24
 5ee:	aa 0f       	add	r26, r26
 5f0:	bb 1f       	adc	r27, r27
 5f2:	a0 0f       	add	r26, r16
 5f4:	b1 1f       	adc	r27, r17
 5f6:	2a e0       	ldi	r18, 0x0A	; 10
 5f8:	e5 e8       	ldi	r30, 0x85	; 133
 5fa:	f1 e0       	ldi	r31, 0x01	; 1
 5fc:	01 90       	ld	r0, Z+
 5fe:	0d 92       	st	X+, r0
 600:	2a 95       	dec	r18
 602:	e1 f7       	brne	.-8      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
			counter += 5;
 604:	05 96       	adiw	r24, 0x05	; 5
 606:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 60a:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 60e:	05 c1       	rjmp	.+522    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'p':
			memcpy(text + counter, P, 5 * sizeof(int));
 610:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 614:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 618:	dc 01       	movw	r26, r24
 61a:	aa 0f       	add	r26, r26
 61c:	bb 1f       	adc	r27, r27
 61e:	a0 0f       	add	r26, r16
 620:	b1 1f       	adc	r27, r17
 622:	2a e0       	ldi	r18, 0x0A	; 10
 624:	eb e7       	ldi	r30, 0x7B	; 123
 626:	f1 e0       	ldi	r31, 0x01	; 1
 628:	01 90       	ld	r0, Z+
 62a:	0d 92       	st	X+, r0
 62c:	2a 95       	dec	r18
 62e:	e1 f7       	brne	.-8      	; 0x628 <__LOCK_REGION_LENGTH__+0x228>
			counter += 5;
 630:	05 96       	adiw	r24, 0x05	; 5
 632:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 636:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 63a:	ef c0       	rjmp	.+478    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'q':
			memcpy(text + counter, Q, 5 * sizeof(int));
 63c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 640:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 644:	dc 01       	movw	r26, r24
 646:	aa 0f       	add	r26, r26
 648:	bb 1f       	adc	r27, r27
 64a:	a0 0f       	add	r26, r16
 64c:	b1 1f       	adc	r27, r17
 64e:	2a e0       	ldi	r18, 0x0A	; 10
 650:	e1 e7       	ldi	r30, 0x71	; 113
 652:	f1 e0       	ldi	r31, 0x01	; 1
 654:	01 90       	ld	r0, Z+
 656:	0d 92       	st	X+, r0
 658:	2a 95       	dec	r18
 65a:	e1 f7       	brne	.-8      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
			counter += 5;
 65c:	05 96       	adiw	r24, 0x05	; 5
 65e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 662:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 666:	d9 c0       	rjmp	.+434    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'r':
			memcpy(text + counter, R, 5 * sizeof(int));
 668:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 66c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 670:	dc 01       	movw	r26, r24
 672:	aa 0f       	add	r26, r26
 674:	bb 1f       	adc	r27, r27
 676:	a0 0f       	add	r26, r16
 678:	b1 1f       	adc	r27, r17
 67a:	2a e0       	ldi	r18, 0x0A	; 10
 67c:	e7 e6       	ldi	r30, 0x67	; 103
 67e:	f1 e0       	ldi	r31, 0x01	; 1
 680:	01 90       	ld	r0, Z+
 682:	0d 92       	st	X+, r0
 684:	2a 95       	dec	r18
 686:	e1 f7       	brne	.-8      	; 0x680 <__LOCK_REGION_LENGTH__+0x280>
			counter += 5;
 688:	05 96       	adiw	r24, 0x05	; 5
 68a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 68e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 692:	c3 c0       	rjmp	.+390    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 's':
			memcpy(text + counter, S, 5 * sizeof(int));
 694:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 698:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 69c:	dc 01       	movw	r26, r24
 69e:	aa 0f       	add	r26, r26
 6a0:	bb 1f       	adc	r27, r27
 6a2:	a0 0f       	add	r26, r16
 6a4:	b1 1f       	adc	r27, r17
 6a6:	2a e0       	ldi	r18, 0x0A	; 10
 6a8:	ed e5       	ldi	r30, 0x5D	; 93
 6aa:	f1 e0       	ldi	r31, 0x01	; 1
 6ac:	01 90       	ld	r0, Z+
 6ae:	0d 92       	st	X+, r0
 6b0:	2a 95       	dec	r18
 6b2:	e1 f7       	brne	.-8      	; 0x6ac <__LOCK_REGION_LENGTH__+0x2ac>
			counter += 5;
 6b4:	05 96       	adiw	r24, 0x05	; 5
 6b6:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 6ba:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 6be:	ad c0       	rjmp	.+346    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 't':
			memcpy(text + counter, T, 5 * sizeof(int));
 6c0:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 6c4:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 6c8:	dc 01       	movw	r26, r24
 6ca:	aa 0f       	add	r26, r26
 6cc:	bb 1f       	adc	r27, r27
 6ce:	a0 0f       	add	r26, r16
 6d0:	b1 1f       	adc	r27, r17
 6d2:	2a e0       	ldi	r18, 0x0A	; 10
 6d4:	e3 e5       	ldi	r30, 0x53	; 83
 6d6:	f1 e0       	ldi	r31, 0x01	; 1
 6d8:	01 90       	ld	r0, Z+
 6da:	0d 92       	st	X+, r0
 6dc:	2a 95       	dec	r18
 6de:	e1 f7       	brne	.-8      	; 0x6d8 <__LOCK_REGION_LENGTH__+0x2d8>
			counter += 5;
 6e0:	05 96       	adiw	r24, 0x05	; 5
 6e2:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 6e6:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 6ea:	97 c0       	rjmp	.+302    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'u':
			memcpy(text + counter, U, 6 * sizeof(int));
 6ec:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 6f0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 6f4:	dc 01       	movw	r26, r24
 6f6:	aa 0f       	add	r26, r26
 6f8:	bb 1f       	adc	r27, r27
 6fa:	a0 0f       	add	r26, r16
 6fc:	b1 1f       	adc	r27, r17
 6fe:	2c e0       	ldi	r18, 0x0C	; 12
 700:	e7 e4       	ldi	r30, 0x47	; 71
 702:	f1 e0       	ldi	r31, 0x01	; 1
 704:	01 90       	ld	r0, Z+
 706:	0d 92       	st	X+, r0
 708:	2a 95       	dec	r18
 70a:	e1 f7       	brne	.-8      	; 0x704 <__LOCK_REGION_LENGTH__+0x304>
			counter += 6;
 70c:	06 96       	adiw	r24, 0x06	; 6
 70e:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 712:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 716:	81 c0       	rjmp	.+258    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'v':
			memcpy(text + counter, V, 5 * sizeof(int));
 718:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 71c:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 720:	dc 01       	movw	r26, r24
 722:	aa 0f       	add	r26, r26
 724:	bb 1f       	adc	r27, r27
 726:	a0 0f       	add	r26, r16
 728:	b1 1f       	adc	r27, r17
 72a:	2a e0       	ldi	r18, 0x0A	; 10
 72c:	ed e3       	ldi	r30, 0x3D	; 61
 72e:	f1 e0       	ldi	r31, 0x01	; 1
 730:	01 90       	ld	r0, Z+
 732:	0d 92       	st	X+, r0
 734:	2a 95       	dec	r18
 736:	e1 f7       	brne	.-8      	; 0x730 <__LOCK_REGION_LENGTH__+0x330>
			counter += 5;
 738:	05 96       	adiw	r24, 0x05	; 5
 73a:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 73e:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 742:	6b c0       	rjmp	.+214    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'w':
			memcpy(text + counter, W, 5 * sizeof(int));
 744:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 748:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 74c:	dc 01       	movw	r26, r24
 74e:	aa 0f       	add	r26, r26
 750:	bb 1f       	adc	r27, r27
 752:	a0 0f       	add	r26, r16
 754:	b1 1f       	adc	r27, r17
 756:	2a e0       	ldi	r18, 0x0A	; 10
 758:	e3 e3       	ldi	r30, 0x33	; 51
 75a:	f1 e0       	ldi	r31, 0x01	; 1
 75c:	01 90       	ld	r0, Z+
 75e:	0d 92       	st	X+, r0
 760:	2a 95       	dec	r18
 762:	e1 f7       	brne	.-8      	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
			counter += 5;
 764:	05 96       	adiw	r24, 0x05	; 5
 766:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 76a:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 76e:	55 c0       	rjmp	.+170    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'x':
			memcpy(text + counter, X, 5 * sizeof(int));
 770:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 774:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 778:	dc 01       	movw	r26, r24
 77a:	aa 0f       	add	r26, r26
 77c:	bb 1f       	adc	r27, r27
 77e:	a0 0f       	add	r26, r16
 780:	b1 1f       	adc	r27, r17
 782:	2a e0       	ldi	r18, 0x0A	; 10
 784:	e9 e2       	ldi	r30, 0x29	; 41
 786:	f1 e0       	ldi	r31, 0x01	; 1
 788:	01 90       	ld	r0, Z+
 78a:	0d 92       	st	X+, r0
 78c:	2a 95       	dec	r18
 78e:	e1 f7       	brne	.-8      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
			counter += 5;
 790:	05 96       	adiw	r24, 0x05	; 5
 792:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 796:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 79a:	3f c0       	rjmp	.+126    	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'y':
			memcpy(text + counter, Y, 5 * sizeof(int));
 79c:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 7a0:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 7a4:	dc 01       	movw	r26, r24
 7a6:	aa 0f       	add	r26, r26
 7a8:	bb 1f       	adc	r27, r27
 7aa:	a0 0f       	add	r26, r16
 7ac:	b1 1f       	adc	r27, r17
 7ae:	2a e0       	ldi	r18, 0x0A	; 10
 7b0:	ef e1       	ldi	r30, 0x1F	; 31
 7b2:	f1 e0       	ldi	r31, 0x01	; 1
 7b4:	01 90       	ld	r0, Z+
 7b6:	0d 92       	st	X+, r0
 7b8:	2a 95       	dec	r18
 7ba:	e1 f7       	brne	.-8      	; 0x7b4 <__LOCK_REGION_LENGTH__+0x3b4>
			counter += 5;
 7bc:	05 96       	adiw	r24, 0x05	; 5
 7be:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 7c2:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 7c6:	29 c0       	rjmp	.+82     	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case 'z':
			memcpy(text + counter, Z, 6 * sizeof(int));
 7c8:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 7cc:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 7d0:	dc 01       	movw	r26, r24
 7d2:	aa 0f       	add	r26, r26
 7d4:	bb 1f       	adc	r27, r27
 7d6:	a0 0f       	add	r26, r16
 7d8:	b1 1f       	adc	r27, r17
 7da:	2c e0       	ldi	r18, 0x0C	; 12
 7dc:	e3 e1       	ldi	r30, 0x13	; 19
 7de:	f1 e0       	ldi	r31, 0x01	; 1
 7e0:	01 90       	ld	r0, Z+
 7e2:	0d 92       	st	X+, r0
 7e4:	2a 95       	dec	r18
 7e6:	e1 f7       	brne	.-8      	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
			counter += 6;
 7e8:	06 96       	adiw	r24, 0x06	; 6
 7ea:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 7ee:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
 7f2:	13 c0       	rjmp	.+38     	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
			case ' ':
			memcpy(text + counter, space, sizeof(int));
 7f4:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 7f8:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
			memcpy(text + counter, space, sizeof(int));
 7fc:	fc 01       	movw	r30, r24
 7fe:	ee 0f       	add	r30, r30
 800:	ff 1f       	adc	r31, r31
 802:	e0 0f       	add	r30, r16
 804:	f1 1f       	adc	r31, r17
 806:	d6 01       	movw	r26, r12
 808:	2d 91       	ld	r18, X+
 80a:	3c 91       	ld	r19, X
 80c:	31 83       	std	Z+1, r19	; 0x01
 80e:	20 83       	st	Z, r18
			counter += 2;
 810:	02 96       	adiw	r24, 0x02	; 2
 812:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 816:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
			break;
		}
		
		memcpy(text + counter, space, sizeof(int));
 81a:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <__data_end>
 81e:	90 91 1f 02 	lds	r25, 0x021F	; 0x80021f <__data_end+0x1>
 822:	fc 01       	movw	r30, r24
 824:	ee 0f       	add	r30, r30
 826:	ff 1f       	adc	r31, r31
 828:	e0 0f       	add	r30, r16
 82a:	f1 1f       	adc	r31, r17
 82c:	d6 01       	movw	r26, r12
 82e:	2d 91       	ld	r18, X+
 830:	3c 91       	ld	r19, X
 832:	31 83       	std	Z+1, r19	; 0x01
 834:	20 83       	st	Z, r18
		counter++;
 836:	01 96       	adiw	r24, 0x01	; 1
 838:	90 93 1f 02 	sts	0x021F, r25	; 0x80021f <__data_end+0x1>
 83c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <__data_end>
		memcpy(text + (i * 8), emptySpace, 8 * sizeof(int));
	}
	memcpy(text + 8, emptySpace, 8 * sizeof(int));
	counter = 8;
	
	for(int i = 0; i < size_of_tekst; i++){
 840:	ec 16       	cp	r14, r28
 842:	fd 06       	cpc	r15, r29
 844:	09 f0       	breq	.+2      	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
		
		memcpy(text + counter, space, sizeof(int));
		counter++;
	}

	write_board_data(text);
 846:	8d cd       	rjmp	.-1254   	; 0x362 <init_letters+0x7c>
 848:	c8 01       	movw	r24, r16
	free(text);
 84a:	f8 dc       	rcall	.-1552   	; 0x23c <write_board_data>
 84c:	c8 01       	movw	r24, r16
 84e:	b5 d0       	rcall	.+362    	; 0x9ba <free>
}
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	1f 91       	pop	r17
 856:	0f 91       	pop	r16
 858:	ff 90       	pop	r15
 85a:	ef 90       	pop	r14
 85c:	df 90       	pop	r13
 85e:	cf 90       	pop	r12
 860:	08 95       	ret

00000862 <main>:

int size_of_tekst = 10;
char string[] = "send nudes";

int main(void){
	clear_display();
 862:	d9 dc       	rcall	.-1614   	; 0x216 <clear_display>
	init_matrix_screen();
 864:	25 dd       	rcall	.-1462   	; 0x2b0 <init_matrix_screen>
 866:	84 ef       	ldi	r24, 0xF4	; 244
	wait(500);
 868:	91 e0       	ldi	r25, 0x01	; 1
 86a:	2c dd       	rcall	.-1448   	; 0x2c4 <wait>
	
	while (1)
	{
		init_letters();
 86c:	3c dd       	rcall	.-1416   	; 0x2e6 <init_letters>
		set_offset();
 86e:	0b dd       	rcall	.-1514   	; 0x286 <set_offset>
 870:	84 ef       	ldi	r24, 0xF4	; 244
		wait(500);
 872:	91 e0       	ldi	r25, 0x01	; 1
 874:	27 dd       	rcall	.-1458   	; 0x2c4 <wait>
 876:	fa cf       	rjmp	.-12     	; 0x86c <main+0xa>

00000878 <__tablejump2__>:
 878:	ee 0f       	add	r30, r30
 87a:	ff 1f       	adc	r31, r31
 87c:	00 24       	eor	r0, r0
 87e:	00 1c       	adc	r0, r0
 880:	0b be       	out	0x3b, r0	; 59
 882:	07 90       	elpm	r0, Z+
 884:	f6 91       	elpm	r31, Z
 886:	e0 2d       	mov	r30, r0
 888:	09 94       	ijmp

0000088a <malloc>:
 88a:	0f 93       	push	r16
 88c:	1f 93       	push	r17
 88e:	cf 93       	push	r28
 890:	df 93       	push	r29
 892:	82 30       	cpi	r24, 0x02	; 2
 894:	91 05       	cpc	r25, r1
 896:	10 f4       	brcc	.+4      	; 0x89c <malloc+0x12>
 898:	82 e0       	ldi	r24, 0x02	; 2
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	e0 91 36 02 	lds	r30, 0x0236	; 0x800236 <__flp>
 8a0:	f0 91 37 02 	lds	r31, 0x0237	; 0x800237 <__flp+0x1>
 8a4:	20 e0       	ldi	r18, 0x00	; 0
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	a0 e0       	ldi	r26, 0x00	; 0
 8aa:	b0 e0       	ldi	r27, 0x00	; 0
 8ac:	30 97       	sbiw	r30, 0x00	; 0
 8ae:	19 f1       	breq	.+70     	; 0x8f6 <malloc+0x6c>
 8b0:	40 81       	ld	r20, Z
 8b2:	51 81       	ldd	r21, Z+1	; 0x01
 8b4:	02 81       	ldd	r16, Z+2	; 0x02
 8b6:	13 81       	ldd	r17, Z+3	; 0x03
 8b8:	48 17       	cp	r20, r24
 8ba:	59 07       	cpc	r21, r25
 8bc:	c8 f0       	brcs	.+50     	; 0x8f0 <malloc+0x66>
 8be:	84 17       	cp	r24, r20
 8c0:	95 07       	cpc	r25, r21
 8c2:	69 f4       	brne	.+26     	; 0x8de <malloc+0x54>
 8c4:	10 97       	sbiw	r26, 0x00	; 0
 8c6:	31 f0       	breq	.+12     	; 0x8d4 <malloc+0x4a>
 8c8:	12 96       	adiw	r26, 0x02	; 2
 8ca:	0c 93       	st	X, r16
 8cc:	12 97       	sbiw	r26, 0x02	; 2
 8ce:	13 96       	adiw	r26, 0x03	; 3
 8d0:	1c 93       	st	X, r17
 8d2:	27 c0       	rjmp	.+78     	; 0x922 <malloc+0x98>
 8d4:	00 93 36 02 	sts	0x0236, r16	; 0x800236 <__flp>
 8d8:	10 93 37 02 	sts	0x0237, r17	; 0x800237 <__flp+0x1>
 8dc:	22 c0       	rjmp	.+68     	; 0x922 <malloc+0x98>
 8de:	21 15       	cp	r18, r1
 8e0:	31 05       	cpc	r19, r1
 8e2:	19 f0       	breq	.+6      	; 0x8ea <malloc+0x60>
 8e4:	42 17       	cp	r20, r18
 8e6:	53 07       	cpc	r21, r19
 8e8:	18 f4       	brcc	.+6      	; 0x8f0 <malloc+0x66>
 8ea:	9a 01       	movw	r18, r20
 8ec:	bd 01       	movw	r22, r26
 8ee:	ef 01       	movw	r28, r30
 8f0:	df 01       	movw	r26, r30
 8f2:	f8 01       	movw	r30, r16
 8f4:	db cf       	rjmp	.-74     	; 0x8ac <malloc+0x22>
 8f6:	21 15       	cp	r18, r1
 8f8:	31 05       	cpc	r19, r1
 8fa:	f9 f0       	breq	.+62     	; 0x93a <malloc+0xb0>
 8fc:	28 1b       	sub	r18, r24
 8fe:	39 0b       	sbc	r19, r25
 900:	24 30       	cpi	r18, 0x04	; 4
 902:	31 05       	cpc	r19, r1
 904:	80 f4       	brcc	.+32     	; 0x926 <malloc+0x9c>
 906:	8a 81       	ldd	r24, Y+2	; 0x02
 908:	9b 81       	ldd	r25, Y+3	; 0x03
 90a:	61 15       	cp	r22, r1
 90c:	71 05       	cpc	r23, r1
 90e:	21 f0       	breq	.+8      	; 0x918 <malloc+0x8e>
 910:	fb 01       	movw	r30, r22
 912:	93 83       	std	Z+3, r25	; 0x03
 914:	82 83       	std	Z+2, r24	; 0x02
 916:	04 c0       	rjmp	.+8      	; 0x920 <malloc+0x96>
 918:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <__flp+0x1>
 91c:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <__flp>
 920:	fe 01       	movw	r30, r28
 922:	32 96       	adiw	r30, 0x02	; 2
 924:	44 c0       	rjmp	.+136    	; 0x9ae <malloc+0x124>
 926:	fe 01       	movw	r30, r28
 928:	e2 0f       	add	r30, r18
 92a:	f3 1f       	adc	r31, r19
 92c:	81 93       	st	Z+, r24
 92e:	91 93       	st	Z+, r25
 930:	22 50       	subi	r18, 0x02	; 2
 932:	31 09       	sbc	r19, r1
 934:	39 83       	std	Y+1, r19	; 0x01
 936:	28 83       	st	Y, r18
 938:	3a c0       	rjmp	.+116    	; 0x9ae <malloc+0x124>
 93a:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__brkval>
 93e:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__brkval+0x1>
 942:	23 2b       	or	r18, r19
 944:	41 f4       	brne	.+16     	; 0x956 <malloc+0xcc>
 946:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 94a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 94e:	30 93 35 02 	sts	0x0235, r19	; 0x800235 <__brkval+0x1>
 952:	20 93 34 02 	sts	0x0234, r18	; 0x800234 <__brkval>
 956:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 95a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 95e:	21 15       	cp	r18, r1
 960:	31 05       	cpc	r19, r1
 962:	41 f4       	brne	.+16     	; 0x974 <malloc+0xea>
 964:	2d b7       	in	r18, 0x3d	; 61
 966:	3e b7       	in	r19, 0x3e	; 62
 968:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 96c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 970:	24 1b       	sub	r18, r20
 972:	35 0b       	sbc	r19, r21
 974:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <__brkval>
 978:	f0 91 35 02 	lds	r31, 0x0235	; 0x800235 <__brkval+0x1>
 97c:	e2 17       	cp	r30, r18
 97e:	f3 07       	cpc	r31, r19
 980:	a0 f4       	brcc	.+40     	; 0x9aa <malloc+0x120>
 982:	2e 1b       	sub	r18, r30
 984:	3f 0b       	sbc	r19, r31
 986:	28 17       	cp	r18, r24
 988:	39 07       	cpc	r19, r25
 98a:	78 f0       	brcs	.+30     	; 0x9aa <malloc+0x120>
 98c:	ac 01       	movw	r20, r24
 98e:	4e 5f       	subi	r20, 0xFE	; 254
 990:	5f 4f       	sbci	r21, 0xFF	; 255
 992:	24 17       	cp	r18, r20
 994:	35 07       	cpc	r19, r21
 996:	48 f0       	brcs	.+18     	; 0x9aa <malloc+0x120>
 998:	4e 0f       	add	r20, r30
 99a:	5f 1f       	adc	r21, r31
 99c:	50 93 35 02 	sts	0x0235, r21	; 0x800235 <__brkval+0x1>
 9a0:	40 93 34 02 	sts	0x0234, r20	; 0x800234 <__brkval>
 9a4:	81 93       	st	Z+, r24
 9a6:	91 93       	st	Z+, r25
 9a8:	02 c0       	rjmp	.+4      	; 0x9ae <malloc+0x124>
 9aa:	e0 e0       	ldi	r30, 0x00	; 0
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	cf 01       	movw	r24, r30
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	1f 91       	pop	r17
 9b6:	0f 91       	pop	r16
 9b8:	08 95       	ret

000009ba <free>:
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	00 97       	sbiw	r24, 0x00	; 0
 9c0:	09 f4       	brne	.+2      	; 0x9c4 <free+0xa>
 9c2:	81 c0       	rjmp	.+258    	; 0xac6 <free+0x10c>
 9c4:	fc 01       	movw	r30, r24
 9c6:	32 97       	sbiw	r30, 0x02	; 2
 9c8:	13 82       	std	Z+3, r1	; 0x03
 9ca:	12 82       	std	Z+2, r1	; 0x02
 9cc:	a0 91 36 02 	lds	r26, 0x0236	; 0x800236 <__flp>
 9d0:	b0 91 37 02 	lds	r27, 0x0237	; 0x800237 <__flp+0x1>
 9d4:	10 97       	sbiw	r26, 0x00	; 0
 9d6:	81 f4       	brne	.+32     	; 0x9f8 <free+0x3e>
 9d8:	20 81       	ld	r18, Z
 9da:	31 81       	ldd	r19, Z+1	; 0x01
 9dc:	82 0f       	add	r24, r18
 9de:	93 1f       	adc	r25, r19
 9e0:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__brkval>
 9e4:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__brkval+0x1>
 9e8:	28 17       	cp	r18, r24
 9ea:	39 07       	cpc	r19, r25
 9ec:	51 f5       	brne	.+84     	; 0xa42 <free+0x88>
 9ee:	f0 93 35 02 	sts	0x0235, r31	; 0x800235 <__brkval+0x1>
 9f2:	e0 93 34 02 	sts	0x0234, r30	; 0x800234 <__brkval>
 9f6:	67 c0       	rjmp	.+206    	; 0xac6 <free+0x10c>
 9f8:	ed 01       	movw	r28, r26
 9fa:	20 e0       	ldi	r18, 0x00	; 0
 9fc:	30 e0       	ldi	r19, 0x00	; 0
 9fe:	ce 17       	cp	r28, r30
 a00:	df 07       	cpc	r29, r31
 a02:	40 f4       	brcc	.+16     	; 0xa14 <free+0x5a>
 a04:	4a 81       	ldd	r20, Y+2	; 0x02
 a06:	5b 81       	ldd	r21, Y+3	; 0x03
 a08:	9e 01       	movw	r18, r28
 a0a:	41 15       	cp	r20, r1
 a0c:	51 05       	cpc	r21, r1
 a0e:	f1 f0       	breq	.+60     	; 0xa4c <free+0x92>
 a10:	ea 01       	movw	r28, r20
 a12:	f5 cf       	rjmp	.-22     	; 0x9fe <free+0x44>
 a14:	d3 83       	std	Z+3, r29	; 0x03
 a16:	c2 83       	std	Z+2, r28	; 0x02
 a18:	40 81       	ld	r20, Z
 a1a:	51 81       	ldd	r21, Z+1	; 0x01
 a1c:	84 0f       	add	r24, r20
 a1e:	95 1f       	adc	r25, r21
 a20:	c8 17       	cp	r28, r24
 a22:	d9 07       	cpc	r29, r25
 a24:	59 f4       	brne	.+22     	; 0xa3c <free+0x82>
 a26:	88 81       	ld	r24, Y
 a28:	99 81       	ldd	r25, Y+1	; 0x01
 a2a:	84 0f       	add	r24, r20
 a2c:	95 1f       	adc	r25, r21
 a2e:	02 96       	adiw	r24, 0x02	; 2
 a30:	91 83       	std	Z+1, r25	; 0x01
 a32:	80 83       	st	Z, r24
 a34:	8a 81       	ldd	r24, Y+2	; 0x02
 a36:	9b 81       	ldd	r25, Y+3	; 0x03
 a38:	93 83       	std	Z+3, r25	; 0x03
 a3a:	82 83       	std	Z+2, r24	; 0x02
 a3c:	21 15       	cp	r18, r1
 a3e:	31 05       	cpc	r19, r1
 a40:	29 f4       	brne	.+10     	; 0xa4c <free+0x92>
 a42:	f0 93 37 02 	sts	0x0237, r31	; 0x800237 <__flp+0x1>
 a46:	e0 93 36 02 	sts	0x0236, r30	; 0x800236 <__flp>
 a4a:	3d c0       	rjmp	.+122    	; 0xac6 <free+0x10c>
 a4c:	e9 01       	movw	r28, r18
 a4e:	fb 83       	std	Y+3, r31	; 0x03
 a50:	ea 83       	std	Y+2, r30	; 0x02
 a52:	49 91       	ld	r20, Y+
 a54:	59 91       	ld	r21, Y+
 a56:	c4 0f       	add	r28, r20
 a58:	d5 1f       	adc	r29, r21
 a5a:	ec 17       	cp	r30, r28
 a5c:	fd 07       	cpc	r31, r29
 a5e:	61 f4       	brne	.+24     	; 0xa78 <free+0xbe>
 a60:	80 81       	ld	r24, Z
 a62:	91 81       	ldd	r25, Z+1	; 0x01
 a64:	84 0f       	add	r24, r20
 a66:	95 1f       	adc	r25, r21
 a68:	02 96       	adiw	r24, 0x02	; 2
 a6a:	e9 01       	movw	r28, r18
 a6c:	99 83       	std	Y+1, r25	; 0x01
 a6e:	88 83       	st	Y, r24
 a70:	82 81       	ldd	r24, Z+2	; 0x02
 a72:	93 81       	ldd	r25, Z+3	; 0x03
 a74:	9b 83       	std	Y+3, r25	; 0x03
 a76:	8a 83       	std	Y+2, r24	; 0x02
 a78:	e0 e0       	ldi	r30, 0x00	; 0
 a7a:	f0 e0       	ldi	r31, 0x00	; 0
 a7c:	12 96       	adiw	r26, 0x02	; 2
 a7e:	8d 91       	ld	r24, X+
 a80:	9c 91       	ld	r25, X
 a82:	13 97       	sbiw	r26, 0x03	; 3
 a84:	00 97       	sbiw	r24, 0x00	; 0
 a86:	19 f0       	breq	.+6      	; 0xa8e <free+0xd4>
 a88:	fd 01       	movw	r30, r26
 a8a:	dc 01       	movw	r26, r24
 a8c:	f7 cf       	rjmp	.-18     	; 0xa7c <free+0xc2>
 a8e:	8d 91       	ld	r24, X+
 a90:	9c 91       	ld	r25, X
 a92:	11 97       	sbiw	r26, 0x01	; 1
 a94:	9d 01       	movw	r18, r26
 a96:	2e 5f       	subi	r18, 0xFE	; 254
 a98:	3f 4f       	sbci	r19, 0xFF	; 255
 a9a:	82 0f       	add	r24, r18
 a9c:	93 1f       	adc	r25, r19
 a9e:	20 91 34 02 	lds	r18, 0x0234	; 0x800234 <__brkval>
 aa2:	30 91 35 02 	lds	r19, 0x0235	; 0x800235 <__brkval+0x1>
 aa6:	28 17       	cp	r18, r24
 aa8:	39 07       	cpc	r19, r25
 aaa:	69 f4       	brne	.+26     	; 0xac6 <free+0x10c>
 aac:	30 97       	sbiw	r30, 0x00	; 0
 aae:	29 f4       	brne	.+10     	; 0xaba <free+0x100>
 ab0:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <__flp+0x1>
 ab4:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <__flp>
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <free+0x104>
 aba:	13 82       	std	Z+3, r1	; 0x03
 abc:	12 82       	std	Z+2, r1	; 0x02
 abe:	b0 93 35 02 	sts	0x0235, r27	; 0x800235 <__brkval+0x1>
 ac2:	a0 93 34 02 	sts	0x0234, r26	; 0x800234 <__brkval>
 ac6:	df 91       	pop	r29
 ac8:	cf 91       	pop	r28
 aca:	08 95       	ret

00000acc <tolower>:
 acc:	91 11       	cpse	r25, r1
 ace:	08 95       	ret
 ad0:	81 54       	subi	r24, 0x41	; 65
 ad2:	8a 51       	subi	r24, 0x1A	; 26
 ad4:	08 f4       	brcc	.+2      	; 0xad8 <tolower+0xc>
 ad6:	80 5e       	subi	r24, 0xE0	; 224
 ad8:	85 5a       	subi	r24, 0xA5	; 165
 ada:	08 95       	ret

00000adc <_exit>:
 adc:	f8 94       	cli

00000ade <__stop_program>:
 ade:	ff cf       	rjmp	.-2      	; 0xade <__stop_program>
